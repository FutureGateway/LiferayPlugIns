configurations {
    senna
}
task buildSenna(type: Copy)

String sennaVersion = "1.0.1"

buildSenna {

    from {
        zipTree(configurations.senna.singleFile)
    }

    include "META-INF/resources/webjars/senna.js/${sennaVersion}/build/amd/"
    includeEmptyDirs = false
    into "classes/META-INF/resources"
}



configJSModules {
    dependsOn buildSenna
    include "**/*.js*"
}

dependencies {
    compileOnly group: "com.liferay", name: "com.liferay.application.list.api", version: "2.0.0"
    compileOnly group: "com.liferay.portal", name: "com.liferay.util.java", version: "2.0.0"
    compileOnly group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "2.0.0"
    compile group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "2.0.0"
    compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib", version: "2.0.0"
    compileOnly group: "javax.portlet", name: "portlet-api", version: "2.0"
    compile group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"
    testCompile group: "org.jabsorb", name: "jabsorb", version: "1.3.1"
    testCompile group: "org.jodd", name: "jodd-core", version: "3.6.4"
    testCompile group: "org.jodd", name: "jodd-json", version: "3.6.4"
    testCompile group: "org.slf4j", name: "slf4j-log4j12", version: "1.7.2"
    compileOnly group: "org.osgi", name: "org.osgi.service.component.annotations", version: "1.3.0"
    compile project(":modules:portal-security-sso-iam")
    senna group: "com.liferay.webjars", name: "com.liferay.webjars.senna.js", transitive: false, version: sennaVersion
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.0.+'
    testCompile group: "org.jodd", name: "jodd", version: "3.3.8"
    testCompile group: "com.liferay", name: "com.liferay.registry.api", version: "1.0.0"
}

apply plugin: 'java'
sourceCompatibility = 1.7
targetCompatibility = 1.7

apply plugin: 'checkstyle'
checkstyle.toolVersion = '6.6'

def checkStyleProps = ['baseDir': "$project.projectDir"]
checkstyleMain {
	configProperties = checkStyleProps
}
checkstyleTest {
	configProperties = checkStyleProps
}

apply plugin: 'jacoco'

task jsCheck(type: Exec) {
    executable "jscs"
    args "src/main/resources/META-INF/resources/js"
}

check.dependsOn jsCheck

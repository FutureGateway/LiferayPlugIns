/**
 * *********************************************************************
 * Copyright (c) 2016: Istituto Nazionale di Fisica Nucleare (INFN) -
 * INDIGO-DataCloud
 *
 * See http://www.infn.it and and http://www.consorzio-cometa.it for details on
 * the copyright holders.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 **********************************************************************
 */
package it.infn.ct.indigo.futuregateway.server;

import java.net.HttpURLConnection;
import java.util.Map;
import java.util.Random;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;

import com.liferay.expando.kernel.service.ExpandoValueLocalService;
import com.liferay.portal.json.JSONFactoryImpl;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.security.sso.iam.IAM;

import it.infn.ct.indigo.futuregateway.utils.DataTest;

/**
 * FGServerManager tests collection.
 */
@RunWith(MockitoJUnitRunner.class)
public class FGServerManagerTest {

    /**
     * An http connection.
     */
    @Mock
    private HttpURLConnection connection;

    /**
     * The IAM security manager.
     */
    @Mock
    private IAM iam;

    /**
     * The expando value.
     */
    @Mock
    private ExpandoValueLocalService expandoValueService;

    /**
     * The FGServerManager.
     */
    @Spy
    private FGServerManager fgsm;

    /**
     * Prepare the environment.
     * Create some component normally generated by OSGi
     */
    @Before
    public final void preparation() {
        JSONFactoryUtil jsonFactoryUtil = new JSONFactoryUtil();
        jsonFactoryUtil.setJSONFactory(new JSONFactoryImpl());
    }

    /**
     * Test getInfrastructures.
     */
    @Test
    public final void testGetInfrastructures() {
        Random rand = new Random();
        int companyId = rand.nextInt();
        int userId = rand.nextInt();
        try {
            Mockito.when(iam.getUserToken(Mockito.anyLong())).thenReturn("");
            fgsm.setIam(iam);
            fgsm.setExpandoValueLocalService(expandoValueService);
            Mockito.doReturn(DataTest.INFRAS).when(fgsm).getCollection(
                            Mockito.anyLong(),
                            Mockito.eq(FGServerConstants.
                                    INFRASTRUCTURE_COLLECTION),
                            Mockito.anyString());
            Map<String, String> infras = fgsm.getInfrastructures(
                    companyId, userId);
            Assert.assertArrayEquals(DataTest.INFRAS_ID, infras.keySet().
                    toArray());
        } catch (Exception e) {
            Assert.fail(e.getMessage());
        }
    }

}
